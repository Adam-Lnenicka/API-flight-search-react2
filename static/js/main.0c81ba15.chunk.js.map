{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","useState","flights","setFlights","departure","setDeparture","destination","setDestination","searchFlights","e","a","url","fetch","response","json","data","firstData","slice","console","log","useEffect","className","onSubmit","htmlFor","name","onChange","target","value","length","map","flight","i","cityFrom","flyFrom","cityTo","flyTo","DateTime","fromMillis","dTime","toFormat","aTime","fly_duration","price","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"sQAsIeA,MAhIf,WAAgB,IAAD,EAGmBC,mBAAS,MAH5B,mBAGLC,EAHK,KAGIC,EAHJ,OAIuBF,mBAAS,IAJhC,mBAILG,EAJK,KAIMC,EAJN,OAK2BJ,mBAAS,IALpC,mBAKLK,EALK,KAKQC,EALR,KAUPC,EAAa,uCAAG,WAAOC,GAAP,qBAAAC,EAAA,6DAEdC,EAFc,oDAEqCP,EAFrC,eAEqDE,EAFrD,8EAIKM,MAAMD,GAJX,cAIZE,EAJY,gBAKCA,EAASC,OALV,OAKZC,EALY,OAMZC,EAAYD,EAAKA,KAAKE,MAAM,EAAG,GACrCC,QAAQC,IAAIH,GACZb,EAAWa,GARO,kDAUlBE,QAAQC,IAAR,MAVkB,0DAAH,sDAgCnB,OAlBAC,qBAAU,WACRZ,MAGA,CAACJ,EAAWE,IAeZ,sBAAKe,UAAU,MAAf,UACE,sBAAKA,UAAU,YAAf,UACA,+CACA,sBAAMC,SAAUd,EAAhB,SACE,sBAAKa,UAAU,WAAf,UACE,gCACE,uBAAOA,UAAU,QAAQE,QAAQ,YAAjC,SAA6C,mDAC7C,yBAAQF,UAAU,qCAAqCG,KAAK,YAAYC,SApB1D,SAAChB,GACvBJ,EACEI,EAAEiB,OAAOC,QAkBH,UACE,2DACA,wBAAQA,MAAM,MAAd,oBACA,wBAAQA,MAAM,MAAd,oBACA,wBAAQA,MAAM,MAAd,oBACA,wBAAQA,MAAM,MAAd,uBACA,wBAAQA,MAAM,MAAd,0BAGJ,uBAAK,uBACL,gCACE,uBAAON,UAAU,QAAQE,QAAQ,YAAjC,SAA6C,sDAC7C,yBAAQF,UAAU,qCAAqCG,KAAK,cAAcC,SA1B1D,SAAChB,GACzBF,EACEE,EAAEiB,OAAOC,QAwBH,UACA,6DACI,wBAAQA,MAAM,MAAd,sBACA,wBAAQA,MAAM,MAAd,uBACA,wBAAQA,MAAM,MAAd,oBACA,wBAAQA,MAAM,MAAd,oBACA,wBAAQA,MAAM,MAAd,0BAGR,uBAAK,+BAOP,qBAAKN,UAAU,cAAf,SAEA,gCAEC,mCAAMjB,EAAUwB,OAAUxB,EAAY,MAAS,GAA/C,IAAqDE,KAEpDJ,IAEEA,EAAQ0B,OAER1B,EAAQ2B,KAER,SAACC,EAAQC,GAAT,OACE,qBAAIV,UAAU,cAAd,UACA,6BAAI,yCAAYU,EAAE,OAElB,sBAAKV,UAAU,aAAf,UACE,gCACE,4CAAc,mCAASS,EAAOE,SAAhB,KAA4BF,EAAOG,QAAnC,OAAd,OACA,0CAAY,mCAASH,EAAOI,OAAhB,KAA0BJ,EAAOK,MAAjC,OAAZ,UAEF,gCACE,6CAAe,iCAASC,WAASC,WAA0B,IAAfP,EAAOQ,OAAcC,SAAS,cAC1E,2CAAa,iCAASH,WAASC,WAA0B,IAAfP,EAAOU,OAAcD,SAAS,cACxE,4CAAc,iCAAST,EAAOW,eAA9B,UAEF,8BACA,yCAAW,mCAASX,EAAOY,MAAhB,UAAX,kBAOF,gEC1GGC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.0c81ba15.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react'\nimport { DateTime, datetimeFromREST  } from 'luxon';\nimport './App.css';\n// import Button from 'react-bootstrap/Button';\n\n\nfunction App() {\n\n\n  const [ flights, setFlights ] = useState(null)\n  const [ departure, setDeparture ] = useState('')\n  const [ destination, setDestination ] = useState('')\n\n  \n  // const url = 'https://api.skypicker.com/flights?flyFrom=PRG&to=LGW&dateFrom=18/11/2020&dateTo=12/12/2020&partner=picky&v=3'\n\n  const searchFlights = async (e) => {\n    // e.preventDefault()\n    const url = `https://api.skypicker.com/flights?flyFrom=${departure}&to=${destination}&dateFrom=12/01/2021&dateTo=12/12/2021&partner=picky&v=3`\n    try {\n      const response = await fetch(url)\n      const data = await response.json()\n      const firstData = data.data.slice(0, 8)\n      console.log(firstData)\n      setFlights(firstData)\n    }catch(err) {\n      console.log(err)\n    }\n  }\n\n  useEffect(() => {\n    searchFlights();\n    // console.log(departure)\n    // console.log(destination)\n  },[departure, destination])\n\n  const selectDeparture = (e) => {\n    setDeparture(\n      e.target.value\n    )\n  } \n\n  const selectDestination = (e) => {\n    setDestination(\n      e.target.value\n    )\n  } \n\n  return (\n    <div className=\"App\">\n      <div className=\"searchBar\">\n      <h1>Flight Search</h1>\n      <form onSubmit={searchFlights}>\n        <div className=\"dropdown\">\n          <div>\n            <label className=\"label\" htmlFor=\"departure\"><strong>Departure  </strong></label>\n            <select className=\"form-control form-control-sm w-100\" name=\"departure\" onChange={selectDeparture}>\n              <option>Choose your departure</option>\n              <option value=\"PRG\">Prague</option>\n              <option value=\"TXL\">Berlin</option>\n              <option value=\"WAW\">Warsaw</option>\n              <option value=\"PED\">Pardubice</option>\n              <option value=\"LON\">London</option>  \n            </select>\n          </div>\n          <br/><br/>\n          <div>\n            <label className=\"label\" htmlFor=\"departure\"><strong>Destination   </strong></label>\n            <select className=\"form-control form-control-sm w-100\" name=\"destination\" onChange={selectDestination}>\n            <option>Choose your destination</option>\n                <option value=\"VLC\">Valencia</option>\n                <option value=\"BCN\">Barcelona</option>\n                <option value=\"MAD\">Madrid</option>\n                <option value=\"MXP\">Milano</option>\n                <option value=\"AIA\">Athens</option>\n            </select>\n          </div>\n        <br/><br/>\n      </div>\n      </form>\n      \n      </div>\n\n    \n      <div className=\"flight-list\">\n      {/* <h3 className=\"card-title\">Flight Details:</h3> */}\n      <div>\n\n       <h2> {departure.length ? (departure + ' to') : '' } {destination}</h2>\n      \n      { flights && (\n\n        !!flights.length ? (\n        \n          flights.map (\n          \n          (flight, i) => \n            <ul className=\"flight-card\">\n            <li><h3>Option {i+1}</h3></li>\n    \n            <div className=\"inner-card\">\n              <div>\n                <li>Fly From: <strong>{flight.cityFrom} ({flight.flyFrom})</strong> </li>\n                <li>Fly To: <strong>{flight.cityTo} ({flight.flyTo})</strong> </li>\n              </div>\n              <div>\n                <li>Departure: <strong>{DateTime.fromMillis(flight.dTime * 1000).toFormat('hh:mm')}</strong></li>\n                <li>Arrival: <strong>{DateTime.fromMillis(flight.aTime * 1000).toFormat('hh:mm')}</strong></li>\n                <li>Duration: <strong>{flight.fly_duration}</strong> </li>\n              </div>\n              <div>\n              <li>Price: <strong>{flight.price} EUR</strong> </li>\n              </div>\n            </div>\n          </ul>\n          \n          )) : (\n            \n            <h2>No flights available</h2>\n\n          )\n        \n          )\n        }\n\n      </div>\n  \n\n    </div>\n      \n    </div>\n  );\n}\n\nexport default App;\n\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}